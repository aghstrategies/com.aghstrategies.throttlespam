<?php

/**
 * @package CRM
 * @copyright CiviCRM LLC https://civicrm.org/licensing
 *
 * Generated from com.aghstrategies.throttlespam/xml/schema/CRM/Throttlespam/ThrottleSpamIp.xml
 * DO NOT EDIT.  Generated by CRM_Core_CodeGen
 * (GenCodeChecksum:7053cea134d902f1afa0b080be4dc519)
 */

/**
 * Database access object for the ThrottleSpamIp entity.
 */
class CRM_Throttlespam_DAO_ThrottleSpamIp extends CRM_Core_DAO {

  /**
   * Static instance to hold the table name.
   *
   * @var string
   */
  public static $_tableName = 'civicrm_throttlespam_ip';

  /**
   * Should CiviCRM log any modifications to this table in the civicrm_log table.
   *
   * @var bool
   */
  public static $_log = TRUE;

  /**
   * Unique ThrottleSpamIp ID
   *
   * @var int
   */
  public $id;

  /**
   * IP address used
   *
   * @var string
   */
  public $ip_address;

  /**
   * When the IP address accessed
   *
   * @var timestamp
   */
  public $access_date;

  /**
   * Did the transaction go thru
   *
   * @var string
   */
  public $success;

  /**
   * FK to Financial Trxn
   *
   * @var int
   */
  public $civicrm_financial_trxn_id;

  /**
   * Class constructor.
   */
  public function __construct() {
    $this->__table = 'civicrm_throttlespam_ip';
    parent::__construct();
  }

  /**
   * Returns foreign keys and entity references.
   *
   * @return array
   *   [CRM_Core_Reference_Interface]
   */
  public static function getReferenceColumns() {
    if (!isset(Civi::$statics[__CLASS__]['links'])) {
      Civi::$statics[__CLASS__]['links'] = static::createReferenceColumns(__CLASS__);
      Civi::$statics[__CLASS__]['links'][] = new CRM_Core_Reference_Basic(self::getTableName(), 'id', 'civicrm_financial_trxn', 'id');
      CRM_Core_DAO_AllCoreTables::invoke(__CLASS__, 'links_callback', Civi::$statics[__CLASS__]['links']);
    }
    return Civi::$statics[__CLASS__]['links'];
  }

  /**
   * Returns all the column names of this table
   *
   * @return array
   */
  public static function &fields() {
    if (!isset(Civi::$statics[__CLASS__]['fields'])) {
      Civi::$statics[__CLASS__]['fields'] = [
        'id' => [
          'name' => 'id',
          'type' => CRM_Utils_Type::T_INT,
          'description' => CRM_Throttlespam_ExtensionUtil::ts('Unique ThrottleSpamIp ID'),
          'required' => TRUE,
          'where' => 'civicrm_throttlespam_ip.id',
          'table_name' => 'civicrm_throttlespam_ip',
          'entity' => 'ThrottleSpamIp',
          'bao' => 'CRM_Throttlespam_DAO_ThrottleSpamIp',
          'localizable' => 0,
          'FKClassName' => 'CRM_Financial_DAO_FinancialTrxn',
        ],
        'ip_address' => [
          'name' => 'ip_address',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => CRM_Throttlespam_ExtensionUtil::ts('IP Address'),
          'description' => CRM_Throttlespam_ExtensionUtil::ts('IP address used'),
          'required' => TRUE,
          'maxlength' => 255,
          'size' => CRM_Utils_Type::HUGE,
          'where' => 'civicrm_throttlespam_ip.ip_address',
          'table_name' => 'civicrm_throttlespam_ip',
          'entity' => 'ThrottleSpamIp',
          'bao' => 'CRM_Throttlespam_DAO_ThrottleSpamIp',
          'localizable' => 0,
        ],
        'access_date' => [
          'name' => 'access_date',
          'type' => CRM_Utils_Type::T_TIMESTAMP,
          'title' => CRM_Throttlespam_ExtensionUtil::ts('Access Date'),
          'description' => CRM_Throttlespam_ExtensionUtil::ts('When the IP address accessed'),
          'required' => TRUE,
          'where' => 'civicrm_throttlespam_ip.access_date',
          'default' => 'CURRENT_TIMESTAMP',
          'table_name' => 'civicrm_throttlespam_ip',
          'entity' => 'ThrottleSpamIp',
          'bao' => 'CRM_Throttlespam_DAO_ThrottleSpamIp',
          'localizable' => 0,
        ],
        'success' => [
          'name' => 'success',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => CRM_Throttlespam_ExtensionUtil::ts('success'),
          'description' => CRM_Throttlespam_ExtensionUtil::ts('Did the transaction go thru'),
          'required' => FALSE,
          'maxlength' => 255,
          'size' => CRM_Utils_Type::HUGE,
          'where' => 'civicrm_throttlespam_ip.success',
          'table_name' => 'civicrm_throttlespam_ip',
          'entity' => 'ThrottleSpamIp',
          'bao' => 'CRM_Throttlespam_DAO_ThrottleSpamIp',
          'localizable' => 0,
        ],
        'civicrm_financial_trxn_id' => [
          'name' => 'civicrm_financial_trxn_id',
          'type' => CRM_Utils_Type::T_INT,
          'description' => CRM_Throttlespam_ExtensionUtil::ts('FK to Financial Trxn'),
          'where' => 'civicrm_throttlespam_ip.civicrm_financial_trxn_id',
          'table_name' => 'civicrm_throttlespam_ip',
          'entity' => 'ThrottleSpamIp',
          'bao' => 'CRM_Throttlespam_DAO_ThrottleSpamIp',
          'localizable' => 0,
        ],
      ];
      CRM_Core_DAO_AllCoreTables::invoke(__CLASS__, 'fields_callback', Civi::$statics[__CLASS__]['fields']);
    }
    return Civi::$statics[__CLASS__]['fields'];
  }

  /**
   * Return a mapping from field-name to the corresponding key (as used in fields()).
   *
   * @return array
   *   Array(string $name => string $uniqueName).
   */
  public static function &fieldKeys() {
    if (!isset(Civi::$statics[__CLASS__]['fieldKeys'])) {
      Civi::$statics[__CLASS__]['fieldKeys'] = array_flip(CRM_Utils_Array::collect('name', self::fields()));
    }
    return Civi::$statics[__CLASS__]['fieldKeys'];
  }

  /**
   * Returns the names of this table
   *
   * @return string
   */
  public static function getTableName() {
    return self::$_tableName;
  }

  /**
   * Returns if this table needs to be logged
   *
   * @return bool
   */
  public function getLog() {
    return self::$_log;
  }

  /**
   * Returns the list of fields that can be imported
   *
   * @param bool $prefix
   *
   * @return array
   */
  public static function &import($prefix = FALSE) {
    $r = CRM_Core_DAO_AllCoreTables::getImports(__CLASS__, 'throttlespam_ip', $prefix, []);
    return $r;
  }

  /**
   * Returns the list of fields that can be exported
   *
   * @param bool $prefix
   *
   * @return array
   */
  public static function &export($prefix = FALSE) {
    $r = CRM_Core_DAO_AllCoreTables::getExports(__CLASS__, 'throttlespam_ip', $prefix, []);
    return $r;
  }

  /**
   * Returns the list of indices
   *
   * @param bool $localize
   *
   * @return array
   */
  public static function indices($localize = TRUE) {
    $indices = [
      'index_ip_address' => [
        'name' => 'index_ip_address',
        'field' => [
          0 => 'ip_address',
        ],
        'localizable' => FALSE,
        'sig' => 'civicrm_throttlespam_ip::0::ip_address',
      ],
    ];
    return ($localize && !empty($indices)) ? CRM_Core_DAO_AllCoreTables::multilingualize(__CLASS__, $indices) : $indices;
  }

}
